package chapter09.item68;

public class Item68 {
    /*
    패키지와 모듈
        - 패키지와 모듈 이름은 각 요소를 점(.)으로 구분하여 계층적으로 명명한다.
        - 요소들은 모두 소문자 알파벳 혹은 숫자로 이루어진다.
        - 조직 바깥에서도 사용될 패키지라면 조직의 인터넷 도미인 이름을 역순으로 사용한다. ex) com.google
        - 예외적으로 표준 라이브러리와 선택적 패키지들은 각각 java와 javax로 시작한다.
        - 패키지 이름의 나머지는 해당 패키지를 설명하는 하나 이상의 요소로 이뤄진다.
        - 각 요소는 일반적으로 8자 이하의 짧은 단어로 한다. ex) utilities 보단 util 처럼 의미가 통하는 약어가 좋다.
        - 인터넷 도메인 이름 뒤에 요소 하나만 붙인 패키지가 많지만, 많은 기능을 제공하는 경우엔 계층을 나눠 더 많은 요소로 구성해도 좋다.

    (열거타입과 애너테이션 포함한) 클래스와 인터페이스
        - 클래스와 인터페이스의 이름은 하나 이상의 단어로 이뤄지며, 각 단어는 대문자로 시작한다. ex) List, FutherTask
        - 여러 단어의 첫 글자만 딴 약자나 max, min 처럼 널리 통용되는 줄임말을 제외하고는 단어를 줄여 쓰지 않도록 한다.
        - 약자의 경우 첫 글자만 대문자로 하는 경향이 더 많다.

    메서드와 필드
        - 메서드와 필드 이름은 첫 글자를 소문자로 쓴다는 점만 빼면 클래스/인터페이스 명명 규칙과 같다.
        - 첫 단어가 약자라면 단어 전체가 소문자여야 한다.
        - 단, 상수 필드는 모두 대문자로 쓰며 단어 사이는 밑줄로 구분한다.

    지역변수
        - 지역변수에도 다른 멤버와 비슷한 명명 규칙이 적용된다.
        - 단. 약어를 써도 좋다. 그 변수가 사용되는 문맥에서 의미를 쉽게 유추할 수 있기 때문이다.
        - 입력 매개변수도 지역변수지만, 메서드 설명 문서에까지 등장하는 만큼 일반 지역변수보다는 신경써줘야 한다.

    타입 매개변수
        - 타입 매개변수 이름은 보통 한 문자로 표현한다.
        - 대부분은 다음의 다섯 가지 중 하나이다.
            - 임의의 타입 : T
            - 컬렉션 원소 : E
            - 맵의 키와 값 : K, V
            - 예외 : X
            - 메서드의 반환 타입 : R
        - 그 외의 임의 타입의 시퀀스 : T, U, V, 혹은 T1, T2, T3 사용

    문법 규칙 - 클래스
        - 철자 규칙과 비교하면 더 유연하고 논란도 많다.
        - 패키지에 대한 규칙은 따로 없다.
        - 객체를 생성할 수 있는 클래스의 이름은 보통 단수 명사나 명사구를 사용한다. ex) Thread, PriorityQueue
        - 객체를 생성할 수 없는 클래스의 이름은 보통 복수형 명사로 짓는다. ex) Collectors, Collections
        - 인터페이스 이름은 클래스와 똑같이 짓거나 able 혹은 ible로 끝나는 형용사로 짓는다. ex) Runnable, Iterable, Accessible
        - 애너테이션은 워낙 다양하게 활용되어 지배적인 규칙이 없이 명사, 동사, 전치사, 형용사가 두루 쓰인다.

    문법 규칙 - 메서드
        - 어떤 동작을 수행하는 메서드의 이름은 동사나 동사구로 짓는다.
        - boolean 값을 반환하는 메서드라면 보통 is나 has로 시작하고 명사나 명사구, 혹은 형용사로 기능하는 아무 단어나 구로 끝나도록 짓는다. ex) isDigit, isEmpty
        - 반환 타입이 boolean이 아니거나 해당 인스턴스의 속성을 반환하는 메서드의 이름은 보통 명사, 명사구, 혹은 get으로 시작하는 동사구로 짓는다. ex) size, hashCode, getTime
        - 객체 타입을 바꿔서 다른 타입의 또 다른 객체를 반환하는 인스턴스 메서드의 이름은 보통 toType 형태로 짓는다. ex) toString, toArray
        - 객체의 내용을 다른 뷰로 보여주는 메서드(아이템 6)의 이름은 asType 형태로 짓는다. ex) asList
        - 정적 팩터리의 이름은 다양하지만 from, of, valueOf, instance, getInstance, newInstance, getType, newType(아이템 1)을 흔히 사용한다.
    */
}
