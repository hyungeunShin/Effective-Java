package chapter10.item74;

public class Item74 {
    /*
    메서드가 던지는 예외는 그 메서드를 올바로 사용하는데 필요한 정보다.
    따라서 각 메서드가 던지는 예외 하나하나를 문서화하는 데 충분한 시간을 쏟아야 한다.

    검사 예외 문서화
        - 검사 예외는 항상 따로 선언하고, 각 예외가 발생하는 상황을 자바독의 @throws 태그를 사용하여 정확히 문서화하자.
        - 공통 상위 클래스 하나로 뭉뜽그려 선언하는 것은 삼가해야 한다.
            - 메서드 사용자에게 각 예외에 대처할 수 있는 힌트를 주지 못할뿐더러, 같은 맥락에서 발생할 여지가 있는 다른 예외들까지 삼켜버릴 수 있어 API 사용성을 크게 떨어뜨린다.

    비검사 예외 문서화
        - 자바 언어가 요구하는 것은 아니지만 비검사 예외도 검사 예외처럼 정성껏 문서화 해두면 좋다.
        - 비검사 예외는 일반적으로 프로그래밍 오류를 뜻하며, 자신이 일으킬 수 있는 오류들이 무엇인지 알려주면 프로그래머는 해당 오류를 피할 수 있다.
        - public 메서드라면 필요한 전제조건을 문서화해야 하며, 그 수단으로 가장 좋은 것이 비검사 예외들을 문서화 하는 것이다.
        - 이는 인터페이스 메서드에서 특히 중요하다. 이 조건이 인터페이스의 일반 규약에 속하게 되어 그 인터페이스를 구현한 모든 구현체가 일관되게 동작하도록 해주기 때문이다.
        - 메서드가 던질 수 있는 예외를 각각 @throws 태그로 문서화하되, 비검사 예외는 메서드 선언의 throws 목록에 넣지 말자.
        - 검사냐 비검사냐에 따라 API 사용자가 해야 할 일이 달라지므로 이 둘을 확실히 구분해주는게 좋다.

    한 클래스에 정의된 많은 메서드가 같은 이유로 같은 예외를 던진다면 그 예외를 클래스 설명에 추가하는 방법도 있다.
    NullPointerException이 가장 흔한 사례이다.
    */
}
