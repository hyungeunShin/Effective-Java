package chapter10.item76;

public class Item76 {
    /*
    실패 원자적(failure-atomic): 호출된 메서드가 실패하더라도 해당 객체는 메서드 호출 전 상태를 유지해야 한다.

    1. 불변 객체로 설계하는 것이다.
        불변 객체는 태생적으로 실패 원자적이다.
        메서드가 실패하면 새로운 객체가 만들어지지 않을 수는 있으나 기존 객체가 불안정한 상태에 빠지는 일은 없다.
        불변 객체의 상태는 생성 시점에 고정되어 절대 변하지 않기 때문이다.

    2. 가변 객체의 메서드를 실패 원자적으로 만드는 가장 흔한 방법은 작업 수행에 앞서 매개변수의 유효성을 검사하는 것이다.
        public Object pop() {
            if(size == 0) {
                throw new EmptyStackException();
            }
            Object result = elements[--size];
            //참조 해제
            elements[size] = null;
            return result;
        }

    3. 실패할 가능성이 있는 모든 코드를, 객체의 상태를 바꾸는 코드보다 앞에 배치한다.
        계산을 수행해보기 전에는 인수의 유효성을 검사해볼 수 없을 때 앞서의 방식에 덧붙여 쓸 수 있는 기법이다.
        TreeMap을 예로 들면 잘못된 타입의 원소를 추가할 때 트리를 변경하기 앞서 해당 원소가 들어갈 위치를 찾는 과정에서 ClassCastException을 던진다.

    4. 객체의 임시 복사본에서 작업을 수행한 후에 작업이 성공적으로 완료되면 원래 객체와 교체한다.
        데이터를 임시 자료구조에 저장해 작업하는게 더 빠를 때 적용하기 좋은 방식이다.
        예를 들어 어떤 정렬 메서드에서 정렬을 수행하기 전에 입력 리스트의 원소들을 배열에 옮겨 담는다.
        물론 이는 성능을 높이고자 취한 결정이지만(배열을 사용하면 정렬 알고리즘의 반복문에서 원소들에 빠르게 접근할 수 있기 때문에), 혹시나 정렬에 실패하더라도 입력 리스트는 변하지 않는 효과를 덤으로 얻게 된다.

    5. 작업 도중 발생하는 실패를 가로채는 복구 코드를 작성하여 작업 전 상태로 되돌리는 방법이다.
        주로 디스크 기반의 내구성(durability)를 보장해야 하는 자료구조에 쓰이는데, 자주 사용되는 방법은 아니다.
    */
}
