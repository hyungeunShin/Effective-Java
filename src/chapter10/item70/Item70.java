package chapter10.item70;

public class Item70 {
    /*
    검사 예외 (Checked Exception)
        - 호출하는 쪽에서 복구하리라 여기지는 상황
        - 검사 예외를 던지면 호출자가 그 예외를 catch로 잡아 처리하거나 더 바깥으로 전파하도록 강제하게 된다.
        - 따라서 메서드 선언에 포함된 검사 예외 각각은 그 메서드를 호출했을 때 발생할 수 있는 유력한 결과임을 API 사용자에게 알려주는 것이다.
        - API 설계자는 API 사용자에게 검사 예외를 던져주어 그 상황에서 회복해내라고 요구한 것이다.
          물론 사용자는 예외를 잡기만 하고, 별다른 조치를 취하지 않을 수도 있지만, 이는 보통 좋지 않는 생각이다.

    비검사 예외 (Unchecked Exception)
        프로그램에서 잡을 필요가 없거나, 혹은 통상적으로는 잡지 말아야 한다.
        프로그램에서 비검사 예외나 에러를 던졌다는 것은 복구가 불가능하거나 더 실행해봐야 잃을게 많다는 뜻이다.
        이런 throwable(타입)을 잡지 않은 스레드는 적절한 오류 메시지를 내뱉으며 중단돈다.

        런타임 예외 (Runtime Exception)
            - 프로그래밍 오류를 나타낼 때 사용
            - 런타임 예외의 대부분은 전제조건을 만족하지 못했을 때 발생한다.
                - ex) 배열의 인덱스는 0 ~ '배열크기 - 1'사이어야 하는데 ArrayIndexOutOfBoundsExceptoin이 발생했다는 건 이 전제조건이 지켜지지 않았다는 뜻이다.
            - 이상의 조건에서 문제가 하나 있다면, 복구할 수 있는 상황인지 프로그래밍 오류인지가 항상 명확히 구분되지 않는다는 사실이다.
                - 예를 들어, 자원 고갈은 말도 안되는 크기의 배열을 할당해 생긴 프로그래밍 오류일 수도 있고 진짜로 자원이 부족해서 발생한 문제일 수 있다.
                - 만약 자원이 일시적으로만 부족하거나 수요가 순간적으로만 몰린 것이라면 충분히 복구할 수 있는 상황일 것이다.
                - 따라서 해당 자원 고갈 상황이 복구될 수 있는 것인지는 API 설계자의 판단에 달렸다.
                - 복구 가능하다고 믿는다면 검사 예외를, 그렇지 않다면 런타임 예외를 사용하자. 확신하기 어렵다면 아마도 비검사 예외를 선택하는 편이 나을 것이다

        에러 (Error)
            - 에러는 보통 JVM이 자원 부족, 불변식 깨짐 등 더 이상 수행을 계속할 수 없는 상황을 나타낼 때 사용한다.
            - Error 클래스를 상속해 하위 클래스를 만드는 일은 자제해야한다.
            - 우리가 구현하는 비검사 throwable은 모두 RuntimeException의 하위 클래스여야 한다.
            - Error는 상속하지 말아야할 뿐 아니라, throw 문을 직접 던지는 일도 없어야 한다.(AssertionError는 예외)
    */
}
