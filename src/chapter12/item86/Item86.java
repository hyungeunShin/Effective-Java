package chapter12.item86;

public class Item86 {
    /*
    1. Serializable을 구현하면 릴리스한 뒤에는 수정하기 어렵다. 
        클래스가 Serializable을 구현하면 직렬화된 바이트 스트림 인코딩(직렬화 형태)도 하나의 공개 API가 된다.
        그래서 이 클래스가 널리 퍼진다면 그 직렬화 형태도 영원히 지원해야 하는 것이다.
        커스텀 직렬화 형태를 설계하지 않고 자바의 기본 방식을 사용하면 직렬화 형태는 최소 적용 당시 클래스의 내부 구현 방식에 영원히 묶여버린다.
        즉, 클래스의 private과 package-private 인스턴스 필드마저 API로 공개하는 꼴이 된다.
        뒤늦게 클래스 내부 구현을 손보면 원래의 직렬화 형태와 달라지게 된다.
        한 쪽은 구버전 인스턴스를 직렬화하고 다른 쪽은 신버전 클래스로 역질렬화한다면 실패를 맛볼 것이다.
        원래의 직렬화 형태를 유지하면서 내부 표현을 바꿀 수도 있지만, 어렵기도 하거니와 소스코드에 지저분한 혹을 남겨놓게 된다.
        그러니 직렬화 가능 클래스를 만들고자 한다면, 길게 보고 감당할 수 있을 만큼 고품질의 직렬화 형태도 주의해서 함께 설계해야 한다.

        직렬화가 클래스 개선을 방해하는 간단한 예
             모든 직렬화된 클래스는 고유 식별 번호를 부여받는다.
             serialVersionUID 라는 이름의 static final long 필드로, 이 번호를 명시하지 않으면 시스템이 런타임에 암호 해시 함수를 적용해 자동으로 클래스 안에 생성해 넣는다.
             이 값을 생성하는 데는 클래스 이름, 구현한 인터페이스들, 컴파일러가 자동으로 생성해 넣은 것을 포함한 대부분의 클래스 멤버들이 고려된다.
             그래서 나중에 편의 메서드를 추가하는 식으로 이들 중 하나라도 수정한다면 직렬 버전 UID 값도 변한다.
             다시 말해, 자동 생성되는 값에 의존하면 쉽게 호환성이 깨져버려 런타임에 InvalidClassException이 발생할 것이다.

    2. Serializable 구현은 버그와 보안 구멍이 생길 위험이 높아진다. 
        객체는 생성자를 사용해 만드는 게 기본이다.
        즉, 직렬화는 언어의 기본 메커니즘을 우회하는 객체 생성 기법이다.
        기본 방식을 따르든 재정의해 사용하든, 역직렬화는 일반 생성자의 문제가 그대로 적용되는 '숨은 생성자'다.
        이 생성자는 전면에 드러나지 않으므로 "생성자에서 구축한 불변식을 모두 보장해야하고 생성 도중 공격자가 객체 내부를 들여다 볼 수 없도록 해야한다"는 사실을 떠올리기 어렵다.
    
    3. Serializable 구현은 해당 클래스의 신버전을 릴리스할 때 테스트할 것이 늘어난다. 
        직렬화 가능 클래스가 수정되면 신버전 인스턴스를 직렬화한 후 구버전으로 역직렬화할 수 있는지, 그리고 그 반대도 가능한지를 검사해야 한다.
        따라서 테스트해야 할 양이 직렬화 가능 클래스의 수와 릴리스 횟수에 비례해 증가한다.
        양방향 직렬화/역직렬화가 모두 성공하고, 원래의 객체를 충실히 복제해내는지를 반드시 확인해야 한다.

    4. Serializable 구현 여부는 가볍게 결정할 사안이 아니다.
        단 객체를 전송하거나 저장할 때 자바 직렬화를 이용하는 프레임워크용 으로 만든 클래스라면 선택의 여지가 없다.
        Serializable을 반드시 구현해야 하는 다른 클래스의 컴포넌트로 쓰일 클래스도 마찬가지다.
        하지만 Serializable 구현에 따르는 비용이 적지 않으니, 클래스를 설계할 때마다 그 이득과 비용을 잘 저울질해야 한다.
        역사적으로 BigInteger와 Instant 같은 값 클래스와 컬렉션 클래스들은 Serializable을 구현하고, 스레드 풀처럼 동작하는 객체를 표현하는 클래스들은 대부분 Serializable을 구현하지 않았다.

    5. 상속용으로 설계된 클래스는 대부분 Serializable을 구현하면 안 되며, 인터페이스도 대부분 Serializable을 확장해서는 안 된다.
        이 규칙을 따르지 않으면, 그런 클래스를 확장하거나 그런 인터페이스를 구현하는 이에게 커다란 부담을 지우게 된다.
        이 규칙을 어겨야 하는 상황도 있는데 Serializable을 구현한 클래스만 지원하는 프레임워크를 사용하는 상황이라면 다른 방도가 없을 것이다.
        대표적인 예로 Throwable이 있다.

    6. 내부 클래스는 직렬화를 구현하지 말아야 한다. 
        내부 클래스에는 바깥 인스턴스의 참조와 유효 범위 안의 지역변수 값들을 저장하기 위해 컴파일러가 생성한 필드들이 자동으로 추가된다.
        익명 클래스와 지역 클래스의 이름을 짓는 규칙이 언어 명세에 나와 있지 않듯, 이 필드들이 클래스 정의에 어떻게 추가되는지도 정의되지 않았다.
        다시 말해 내부 클래스에 대한 기본 직렬화 형태는 분명하지 않다.
        단, 정적 맴버 클래스는 Serializable을 구현해도 된다.    
    */
}
